package builder.improve;

import builder.CommonHouse;

/**
 * 建造者模式的注意事项和细节
 * 1、客户端（使用程序）不必直到产品内部组成的细节，将产品本身和产品的创建过程解耦，是的相同的创建过程可以创建不同的对象。
 * 2、每一个具体建造者都相对独立，而与其他建造者无关，因此可以很方便的替换剧吐间照着或增加新的具体建造者。用户可以用不同的
 * 建造者即可得到不同的产品对象。
 * 3、可以更加精细地控制产品的创建过程，将复杂产品的床架步骤分解在不同的方法中，是的创建过程更加清晰。也方便使用程序来控制
 * 创建过程。
 * 4、增加新的创建者不需要修改原有类库中的代码，指挥者针对抽象创建者类编程，系统扩展方便，符合开闭原则。
 * 5、建造者模式创建的对象都有一定的相似性，其组成部分类似，如果产品之间的差异性很大，则不适合使用创建者模式。因此使用范围
 * 收到一定限制。
 * 6、如果产品的内部变化复杂，可能会导致需要定义很多具体的创建者类来实现这种变化，导致系统变得很庞大。因此在这种情况下，要
 * 考虑是否选择创建者模式。
 * 7、抽象工厂模式和创建者模式
 *   抽象工厂模式实现对产品家族的创建，一个产品家族就是这样的一些列的产品：具有不同分类维度的产品组合，采用抽线工厂模式
 *   不需要关心船舰过程，只关心什么产品由什么工厂生产即可。而创建者模式是要求按照指定的蓝图创建茶品，它的主要目的是通过
 *   组装零配件而产生一个新的产品。
 */
public class Client {
    public static void main(String[] args) {
        //
        CommonHouseBuilder commonHouseBuilder = new CommonHouseBuilder();
        //
        HouseDirector houseDirector = new HouseDirector(commonHouseBuilder);

        House house = houseDirector.constructHouse();

    }
}
